# peeking into the data and show the log mel spectrogram


import os
import numpy as np
import matplotlib.pyplot as plt
import librosa
import librosa.display
import tensorflow as tf


# peeking into the target npz file generated by preprocessing
proj_path = os.path.abspath(os.getcwd())
npz_path = proj_path + '/data/npz/'
npz_file_name = npz_path + 'data_20220801_2234.npz'
data = np.load(npz_file_name)
x_train = data['x_train']
y_train = data['y_train']

x1 = x_train[0]
print('Input Size: ' + str(x1.shape))
data_type = x1[0][0].dtype
print('Data type: ')output_shape
print(data_type)

x_train_shape = x_train.shape
y_train_shape = y_train.shape
print('Input Size: ' + str(x_train_shape))
print('Output Size: ' + str(y_train_shape))


# plotting
fig, ax = plt.subplots()
img = librosa.display.specshow(x1, x_axis='time',
                         y_axis='mel', sr=44100,
                         fmax=8000, ax=ax)

fig.colorbar(img, ax=ax, format='%+2.0f dB')

ax.set(title='Mel-frequency spectrogram')
plt.show()
print('Done plotting.')


# check data set consistency
x_shape = x_train.shape
for p in range(x_shape[0]):
    for q in range(x_shape[1]):
        for r in range(x_shape[2]):
            if x_train[p][q][r].dtype != data_type:
                print('data type error at: ')
                print(p)
                print(q)
                print(r)
print('Done checking data consistency.')


# # Step 0: Feature preprocessing, needed for audio but not for images
# mnist = tf.keras.datasets.mnist


# # Step 1: Shapes of inputs and outputs
# (x_train, y_train), (x_test, y_test) = mnist.load_data()
# x_train, x_test = x_train / 255.0, x_test / 255.0
# input_shape = x_train.shape
# print("Input Shape: " + str(input_shape))


# xx1 = x_train[1]
# plt.imshow(xx1)
# plt.show()
# print('Done.')



